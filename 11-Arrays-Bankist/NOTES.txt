
>> Simple Array Methods

    arr.pop() // removes end el
    arr.push() // add to end
    arr.shift() // reomved from start
    arr.unshift // add to start
    arr.slice(inc, exl) // acts like substr, use on arr and str
    arr.splice(start, end, replace) // deletes els from orig
    arr.reverse()
    arr.join(' - ') // joing all els with -
    arr.concat(arr2) // same as doing [...arr, ...arr2] 
    arr.at[-1] // get end el, usually arr[length - 1]
    arr.includes() // value === an element
    arr.indexOff(''this value') returns the index 
    C:\Users\k4eum\Documents\Code\Languages\JS\complete-javascript-course-master\11-Arrays-Bankist\summary.png

>> Looping arrays

    > for(const el of arr){
        for(const [index, element] of arr.entries()){

        }
    }

    > arr.forEach(function(el, i, arr) {
        // arr.forEach takes a colosure(element)
    })
    
    >can't use break and continue

>> map, reduce, filter

    > creates new arrays based on transforming data from other arrays 

    > arr.map(fn(el, i, arr){return el}) loops over array like forEach but returns new array
    > arr.filter.(fn(el, i, arr)) uses a condition and if passed returns a new array 
    > arr.reduce.(function(accumulator, el, i, arr){ takes all arr elements and create just one
        return accumulator + el;
    }, 0) 
        accumulator is our snowball to one 'value', e.g. add all el together 
        the 0 in the 2nd param is the initial value of the accumulator
    > can chain each one on to the next

>> chapter pratical lessons in end of script file