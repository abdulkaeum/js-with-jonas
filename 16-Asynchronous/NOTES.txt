>> Synchronous code
    > Synchronous is the opposite to Asynchronous
    > Synchronous means exucting code line by line of execution
    > That means each line waits for the line above to finish executing
    > This creates a problem when 1 line of code take stoo long to run
    > e.g an alert will block the code execution, nothing will continue to execute until we ok it

    some code here
    alert()
    some code here -> this line won't get executed

>> Asynchronous code
    > Asynchronous means not accouring at the same time

    some code here - executed
    setTimeout(function(){
        some code here - executed in the future i.e 5 seconds
    }, 5000)
    some code here - executed before the setTimeout becuase it's Synchronous code

    > The setTimeout is a non blocking code i.e Asynchronous code.
    > It will register the callback to execute in 5 seconds and allow the executing code to continue moving on
    > So execution does not wait/pause/block at the time setTimeout is called

    > NOTES: just because the setTimeout takes a callback, that is Asynchronous, that does not mean a callback that's required on the map method is also Asynchronous. dont't be confused by this!

    > Another example - Asynchronous img loading in background with event and callback

        const img = document.querySelector('.dog')
        img.src = 'dog.png'
        img.addEventListener('load', function(){
            img.classList.add('fadeIn')
        })
        p.style.width = '300px'

        img.src is an Asynchronous code, setting the src attr is loading an image in the background
        once finshed loading, a load event will be omiited by JS.
        we then can listen for that event in order to act on it
        WE WAIT FOR THIS IMG TO BE LOADED USING THE addEventListener AND CODE IS NOT BLOCKED, IT MOVES ON

        SO YOU'RE ESEENTIALLY WRITTING FUTURE CODE TO BE EXECUTED AT A SPECIFIC TIME WHILE PART OF THE CODE IS WORKING IN THE BACKGROUND

>> AJAX - Asynchronous JavaScript and XML
    > AJAX calls alllow us to request data from web servers in an Asynchronous way
    > So without reloading the page - data is fetched in the background
    > i.e a client/browser can make a HTTP (GET / POST ETC) request to a web server asking for data 
        > the server will then send back a resposne with the data 
        > the web server will have a web API to interact with 
    > XML not longer used in many cases
    > JSON data format most popular API format today
        > it's a JS obj converted in to a string
            > very easy to send across the web and use in JS 

>> A promise

    > A promise is an obj/container used as a placeholder for the future result of an Asynchronous operation... so a container for a future value
        >Pending
            >Settled
                >Fulfilled = success
                >Rejected = error occured

    > A promise is generated from running the fetch(), it will return a promise

    > Promise can also be build manually

>> Consuming a promise

    > Once we have our settled response back we can consume it if Fulfilled or deal with it if it's been Rejected

>> Event Loop

    1. All Asynchronous code are ran in the browser (WEB API's) such as a fetch() setTimeout() DOM(). This is where they are put and not the call stack

    2. Once the Asynchronous code is Fulfilled they are then sent to the callback queue

    3. Finally the event loop looks into the call stack and checks if it's empty and then takes in the next call back from the callback queue

>> ES2017 Consuming Promises with Async/Await intead of the then() catch()

    1. start with creating an Async function that will return a promise
        This will run in the background - none code blocking

        async function()

    2. within it, await a promise i.e fetch()

       async function(){
        const response = await fetch()
       }

    3. await the promise of the resposne and call the json()

        async function(){
            const response = await fetch()
            const data = await response.json()
        }

    4. awaits only return the resolved section of a promise
    rejected sections must be caught in the catch()

>> Returning Values from Async Functions

    > The async function will return a promise
        const test = async function (){
            await ....
            return 'xxxxx';
        }

        This will return Promise obj and not the xxxxx

        It's still running so JS does not know what to return except the pending promise

        solution:
        test().then(data => data) // xxxxx
        .catch()

>> Building a promise

    > In practice we use this to convert old callback Asynchronous behaviour into promise based

    const variable = new Promise(function(resolve, reject){
        
        // some Asynchronous code

        if(1 == 1) resolve()
        else reject()
    })

    It takes in one arg aka executer function
        This function will contain the Asynchronous behaviour
            This takes in two args RESOLVED and REJECT functions
            resolve = mark promise as Fulfilled
            reject = mark promise as Fulfilled


*https://www.youtube.com/watch?v=V_Kr9OSfDeU
https://www.youtube.com/watch?v=DHvZLI7Db8E
https://www.youtube.com/watch?v=Kpn2ajSa92c